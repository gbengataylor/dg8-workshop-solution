quarkus.infinispan-client.server-list=datagrid-service:11222
#Sets client intelligence used by authentication , in our case its basic, since we deployed a minimal server config
quarkus.infinispan-client.client-intelligence=
#Sets user name used by authentication, in our case its developer, thats the default from the operator.
quarkus.infinispan-client.auth-username=developer
quarkus.infinispan-client.auth-password=jOkWKIqguUHC5tJu


quarkus.http.cors=true

# Openshift extension settings.
quarkus.openshift.expose=true 

# if you dont set this and dont have a valid cert the deployment wont happen

quarkus.kubernetes-client.trust-certs=true


#near caching
# Near caches are optional caches for Hot Rod Java client implementations that keep recently accessed data close to the user, providing faster access to data that is accessed frequently. This cache acts as a local Hot Rod client cache that is updated whenever a remote entry is retrieved via get or getVersioned operations.

# In Red Hat JBoss Data Grid, near cache consistency is achieved by using remote events, which send notifications to clients when entries are modified or removed (refer to Remote Event Listeners (Hot Rod)). With Near Caching, local cache remains consistent with remote cache. Local entry is updated or invalidated whenever remote entry on the server is updated or removed. At the client level, near caching is configurable as either of the following:

# DISABLED - the default mode, indicating that Near Caching is not enabled.

# INVALIDATED - enables near caching, keeping it in sync with the remote cache via invalidation messages.
# When should I use it? Near caching can improve the performance of an application when most of the accesses 
#  given cache are read-only and the accessed dataset is relatively small. When an application is doing lots of 
#  writes to a cache, invalidations, evictions and updates to the near cache need to happen. In such a 
#  scenario near cache wont be beneficial.

# For Quarkus, near caching is disabled by default, but you can enable it by setting the profile config 
# property quarkus.infinispan-client.near-cache-max-entries to a value greater than 0. You can also
#  configure a regular expression so that only a subset of caches have near caching applied through the 
#  quarkus.infinispan-client.near-cache-name-pattern attribute.
infinispan.client.hotrod.near_cache.mode=INVALIDATED
infinispan.client.hotrod.near_cache.max_entries=40
infinispan.client.hotrod.near_cache.cache_name_pattern=*i8n-.
